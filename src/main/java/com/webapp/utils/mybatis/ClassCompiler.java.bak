/*
 * Decompiled with CFR 0_115.
 * 
 * Could not load the following classes:
 *  org.slf4j.Logger
 *  org.slf4j.LoggerFactory
 */
package com.webapp.utils.mybatis;

import java.io.File;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.tools.DiagnosticListener;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;
import javax.tools.SimpleJavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClassCompiler {
    private static final Logger logger = LoggerFactory.getLogger((Class)ClassCompiler.class);

    public static Class<?> compile(String name, String content) {
        List<String> options;
        StandardJavaFileManager fileManager;
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager = compiler.getStandardFileManager(null, Locale.SIMPLIFIED_CHINESE, Charset.defaultCharset()), null, options = Arrays.asList("-d", ClassCompiler.getOutDir()), null, Arrays.asList(new JavaObject(name, content)));
        boolean result = task.call();
        if (result) {
            logger.info("Compile it successfully.");
            try {
                return Class.forName(name);
            }
            catch (ClassNotFoundException e) {
                e.printStackTrace();
                logger.error("", (Throwable)e);
            }
        }
        return null;
    }

    private static String getOutDir() {
        String outDir = "";
        try {
            File classPath = new File(ClassCompiler.class.getResource("/").toURI());
            outDir = classPath.getAbsolutePath() + File.separator;
            logger.info("out dir --> {}", (Object)outDir);
        }
        catch (URISyntaxException e1) {
            e1.printStackTrace();
        }
        return outDir;
    }

    private static class JavaObject
    extends SimpleJavaFileObject {
        private String content;

        public JavaObject(String name, String content) {
            super(URI.create("string:///" + name.replace('.', '/') + JavaFileObject.Kind.SOURCE.extension), JavaFileObject.Kind.SOURCE);
            this.content = content;
        }

        @Override
        public CharSequence getCharContent(boolean ignoreEncodingErrors) {
            return this.content;
        }
    }

}
